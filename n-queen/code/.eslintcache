[{"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\reportWebVitals.ts":"1","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\App.tsx":"2","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\index.tsx":"3","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\components\\game-table\\GameTable.tsx":"4","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGameTypes.ts":"5","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGame.ts":"6","F:\\project\\node\\ai projects\\n-queen\\src\\App.tsx":"7","F:\\project\\node\\ai projects\\n-queen\\src\\components\\game-table\\GameTable.tsx":"8","F:\\project\\node\\ai projects\\n-queen\\src\\reportWebVitals.ts":"9","F:\\project\\node\\ai projects\\n-queen\\src\\index.tsx":"10","F:\\project\\node\\ai projects\\n-queen\\src\\infrastructures\\n-queen\\NQeenTypes.ts":"11","F:\\project\\node\\ai projects\\n-queen\\src\\infrastructures\\n-queen\\NQueen.ts":"12"},{"size":425,"mtime":1611855620422,"results":"13","hashOfConfig":"14"},{"size":231,"mtime":1611862874911,"results":"15","hashOfConfig":"14"},{"size":500,"mtime":1611855620422,"results":"16","hashOfConfig":"14"},{"size":4324,"mtime":1612047562037,"results":"17","hashOfConfig":"14"},{"size":248,"mtime":1612015679152,"results":"18","hashOfConfig":"14"},{"size":10221,"mtime":1612045823347,"results":"19","hashOfConfig":"14"},{"size":231,"mtime":1611862874911,"results":"20","hashOfConfig":"21"},{"size":4932,"mtime":1612253907990,"results":"22","hashOfConfig":"21"},{"size":425,"mtime":1611855620422,"results":"23","hashOfConfig":"21"},{"size":500,"mtime":1611855620422,"results":"24","hashOfConfig":"21"},{"size":104,"mtime":1612212633062,"results":"25","hashOfConfig":"21"},{"size":3067,"mtime":1612253921894,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b5syf7",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"1x9uvkd",{"filePath":"43","messages":"44","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\reportWebVitals.ts",[],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\App.tsx",["53"],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\index.tsx",[],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\components\\game-table\\GameTable.tsx",["54","55","56","57","58"],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGameTypes.ts",[],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGame.ts",["59","60","61"],"import { XO, whichTurn, INodeOfTreeType, IChoice } from \"./TicTacToeGameTypes\";\r\nimport lodash, { xor } from \"lodash\";\r\n\r\nexport default class TicTacToeGame {\r\n  turn = whichTurn.HUMAN as whichTurn;\r\n  private humanValue = XO.O as XO;\r\n  private computerValue = XO.X as XO;\r\n  choices = [] as IChoice[];\r\n  box = [\r\n    [XO.EMPTY, XO.EMPTY, XO.EMPTY],\r\n    [XO.EMPTY, XO.EMPTY, XO.EMPTY],\r\n    [XO.EMPTY, XO.EMPTY, XO.EMPTY],\r\n  ] as XO[][];\r\n  /**\r\n   *this class is for handle tic-tac-toe game\r\n   */\r\n  constructor() {}\r\n\r\n  //main methods\r\n  startGame = () => {\r\n    this.emptyBox();\r\n  };\r\n  stopGame = () => {\r\n    console.log(\"finish it right now\");\r\n  };\r\n  humanMove = (i: number, j: number): XO[][] => {\r\n    if (this.turn === whichTurn.HUMAN) {\r\n      this.choices = [];\r\n      this.box[i][j] = this.humanValue;\r\n      this.turn = whichTurn.COMPUTER;\r\n      // let newBox = this.alphaBetaAlgorithm(\r\n      //   lodash.cloneDeep(this.box),\r\n      //   -Infinity,\r\n      //   +Infinity,\r\n      //   whichTurn.COMPUTER,\r\n      //   true\r\n      // ) as XO[][];\r\n      // if (!newBox) {\r\n      //   this.stopGame();\r\n      // }\r\n    }\r\n    return this.box;\r\n  };\r\n  computerMove = (): XO[][] => {\r\n    if (this.turn === whichTurn.COMPUTER) {\r\n      this.choices = [];\r\n      this.alphaBetaAlgorithm(\r\n        lodash.cloneDeep(this.box),\r\n        -Infinity,\r\n        +Infinity,\r\n        whichTurn.COMPUTER,\r\n        true\r\n      ) as XO[][];\r\n\r\n      console.log([...this.choices]);\r\n      this.box = this.getFinalBox([...this.choices]);\r\n      this.turn = whichTurn.HUMAN;\r\n      return this.box;\r\n    }\r\n    return this.box;\r\n  };\r\n  //computer is defined as minimizer and human as maximiser\r\n  // alphaBetaAlgorithm = (\r\n  //   inputBox: XO[][],\r\n  //   alpha: number,\r\n  //   beta: number,\r\n  //   turn: whichTurn,\r\n  //   isFirstStep: boolean\r\n  // ): number | XO[][] | undefined => {\r\n  //   //console.log(inputBox);\r\n  //   if (this.isFull(inputBox)) {\r\n  //     return turn === whichTurn.HUMAN\r\n  //       ? this.getScore(inputBox, this.humanValue) -\r\n  //           this.getScore(inputBox, this.computerValue)\r\n  //       : this.getScore(inputBox, this.computerValue) -\r\n  //           this.getScore(inputBox, this.humanValue);\r\n  //   }\r\n\r\n  //   if (turn === whichTurn.COMPUTER) {\r\n  //     let nodeChildren = this.getChildren(inputBox, this.computerValue);\r\n  //     for (let arg of nodeChildren) {\r\n  //       let algorithmOutput = this.alphaBetaAlgorithm(\r\n  //         [...arg],\r\n  //         alpha,\r\n  //         beta,\r\n  //         whichTurn.HUMAN,\r\n  //         false\r\n  //       ) as number;\r\n  //       if (algorithmOutput <= beta) {\r\n  //         beta = algorithmOutput;\r\n  //         if (isFirstStep) {\r\n  //           if (beta === 0) {\r\n  //             return undefined;\r\n  //           }\r\n  //           this.choices.push({ value: algorithmOutput, box: arg });\r\n  //           continue;\r\n  //         }\r\n  //         if (alpha >= beta) {\r\n  //           return beta;\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     return beta;\r\n  //   } else {\r\n  //     let nodeChildren = this.getChildren(inputBox, this.humanValue);\r\n  //     for (let arg of nodeChildren) {\r\n  //       let algorithmOutput = this.alphaBetaAlgorithm(\r\n  //         [...arg],\r\n  //         alpha,\r\n  //         beta,\r\n  //         whichTurn.COMPUTER,\r\n  //         false\r\n  //       ) as number;\r\n  //       if (algorithmOutput >= alpha) {\r\n  //         alpha = algorithmOutput;\r\n  //         if (isFirstStep) {\r\n  //           if (alpha === 0) {\r\n  //             return undefined;\r\n  //           }\r\n  //           this.choices.push({ value: algorithmOutput, box: arg });\r\n  //           continue;\r\n  //         }\r\n  //         if (alpha >= beta) {\r\n  //           return alpha;\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     return alpha;\r\n  //   }\r\n  // };\r\n\r\n  alphaBetaAlgorithm = (\r\n    inputBox: XO[][],\r\n    alpha: number,\r\n    beta: number,\r\n    turn: whichTurn,\r\n    isFirstStep: boolean\r\n  ): number | XO[][] | undefined => {\r\n    //console.log(inputBox);\r\n    if (this.oneLeft(inputBox)) {\r\n      if (turn === whichTurn.COMPUTER) {\r\n        this.insertLeftOne(inputBox, this.computerValue);\r\n      } else {\r\n        this.insertLeftOne(inputBox, this.humanValue);\r\n      }\r\n    }\r\n\r\n    if (this.isFull(inputBox)) {\r\n      return (\r\n        this.getScore(inputBox, this.computerValue) * -1 +\r\n        this.getScore(inputBox, this.humanValue)\r\n      );\r\n    }\r\n\r\n    if (turn === whichTurn.COMPUTER) {\r\n      if (\r\n        this.getScore(inputBox, this.computerValue) !== 0 ||\r\n        this.getScore(inputBox, this.humanValue) !== 0\r\n      ) {\r\n        return (\r\n          this.getScore(inputBox, this.computerValue) * -1 +\r\n          this.getScore(inputBox, this.humanValue)\r\n        );\r\n      }\r\n      let nodeChildren = this.getChildren(inputBox, this.computerValue);\r\n      for (let arg of nodeChildren) {\r\n        let algorithmOutput = this.alphaBetaAlgorithm(\r\n          [...arg],\r\n          alpha,\r\n          beta,\r\n          whichTurn.HUMAN,\r\n          false\r\n        ) as number;\r\n        if (algorithmOutput < beta) {\r\n          beta = algorithmOutput;\r\n          if (isFirstStep) {\r\n            // if (beta === 0) {\r\n            //   return undefined;\r\n            // }\r\n            this.choices.push({ value: algorithmOutput, box: arg });\r\n          }\r\n          if (alpha > beta) {\r\n            return beta;\r\n          }\r\n        }\r\n      }\r\n      if (isFirstStep) {\r\n        //return nodeChildren[nodeChildren.length - 1];\r\n      }\r\n      return beta;\r\n    } else {\r\n      if (\r\n        this.getScore(inputBox, this.computerValue) !== 0 ||\r\n        this.getScore(inputBox, this.humanValue) !== 0\r\n      ) {\r\n        return (\r\n          this.getScore(inputBox, this.computerValue) * -1 +\r\n          this.getScore(inputBox, this.humanValue)\r\n        );\r\n      }\r\n      let nodeChildren = this.getChildren(inputBox, this.humanValue);\r\n      for (let arg of nodeChildren) {\r\n        let algorithmOutput = this.alphaBetaAlgorithm(\r\n          [...arg],\r\n          alpha,\r\n          beta,\r\n          whichTurn.COMPUTER,\r\n          false\r\n        ) as number;\r\n        if (algorithmOutput > alpha) {\r\n          alpha = algorithmOutput;\r\n          if (isFirstStep) {\r\n            // if (alpha === 0) {\r\n            //   return undefined;\r\n            // }\r\n            this.choices.push({ value: algorithmOutput, box: arg });\r\n          }\r\n          if (alpha > beta) {\r\n            return alpha;\r\n          }\r\n        }\r\n      }\r\n      // if (isFirstStep) {\r\n      //   return nodeChildren[nodeChildren.length - 1];\r\n      // }\r\n      return alpha;\r\n    }\r\n  };\r\n\r\n  ////secondary methods\r\n  //empty main box\r\n  private emptyBox = (): void => {\r\n    for (let i = 0; i < this.box.length; i++) {\r\n      for (let j = 0; j < this.box[i].length; j++) {\r\n        this.box[i][j] = XO.EMPTY;\r\n      }\r\n    }\r\n  };\r\n\r\n  //get score of an full box\r\n  private getScore = (inputBox: XO[][], xo: XO): number => {\r\n    let score = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n      if (\r\n        inputBox[i][0] === xo &&\r\n        inputBox[i][1] === xo &&\r\n        inputBox[i][2] === xo\r\n      ) {\r\n        score++;\r\n      }\r\n      if (\r\n        inputBox[0][i] === xo &&\r\n        inputBox[1][i] === xo &&\r\n        inputBox[2][i] === xo\r\n      ) {\r\n        score++;\r\n      }\r\n    }\r\n\r\n    if (\r\n      inputBox[0][0] === xo &&\r\n      inputBox[1][1] === xo &&\r\n      inputBox[2][2] === xo\r\n    ) {\r\n      score++;\r\n    }\r\n    if (\r\n      inputBox[0][2] === xo &&\r\n      inputBox[1][1] === xo &&\r\n      inputBox[2][0] === xo\r\n    ) {\r\n      score++;\r\n    }\r\n    return score;\r\n  };\r\n\r\n  //predict all available situations\r\n  private predictSituations = (inputBox: XO[][], value: XO): XO[][][] => {\r\n    let outPut = [] as XO[][][];\r\n    let emptyAddresses = [];\r\n    for (let i = 0; i < inputBox.length; i++) {\r\n      for (let j = 0; j < inputBox.length; j++) {\r\n        if (inputBox[i][j] === XO.EMPTY) {\r\n          emptyAddresses.push({ i, j });\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let arg of emptyAddresses) {\r\n      let newBox = lodash.cloneDeep(inputBox);\r\n      newBox[arg.i][arg.j] = value;\r\n      outPut.push(newBox);\r\n    }\r\n    return outPut;\r\n  };\r\n\r\n  //check that main box is full or not\r\n  private isFull = (inputBox: XO[][]): boolean => {\r\n    let temp = [...inputBox];\r\n    for (let i = 0; i < temp.length; i++) {\r\n      for (let j = 0; j < temp[i].length; j++) {\r\n        if (temp[i][j] === XO.EMPTY) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  private oneLeft = (inputBox: XO[][]): boolean => {\r\n    let sum = 0;\r\n    let temp = [...inputBox];\r\n    for (let i = 0; i < temp.length; i++) {\r\n      for (let j = 0; j < temp[i].length; j++) {\r\n        if (temp[i][j] === XO.EMPTY) {\r\n          sum++;\r\n        }\r\n      }\r\n    }\r\n    if (sum === 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  private insertLeftOne = (inputBox: XO[][], xo: XO) => {\r\n    for (let i = 0; i < inputBox.length; i++) {\r\n      for (let j = 0; j < inputBox[i].length; j++) {\r\n        if (inputBox[i][j] === XO.EMPTY) {\r\n          inputBox[i][j] = xo;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private getChildren = (inputBox: XO[][], value: XO): XO[][][] => {\r\n    return this.predictSituations(inputBox, value);\r\n  };\r\n  getFinalBox = (inputChoices: IChoice[]): XO[][] => {\r\n    // if (this.turn === whichTurn.COMPUTER) {\r\n    //   return inputChoices.sort((item) => item.value)[0].box;\r\n    // } else {\r\n    //   return inputChoices.sort((item) => item.value)[inputChoices.length - 1]\r\n    //     .box;\r\n    // }\r\n    return [...inputChoices].sort((a, b) => a.value - b.value)[0].box;\r\n  };\r\n  checkForWinner = (inputBox: XO[][]): whichTurn | null => {\r\n    if (this.getScore([...inputBox], XO.O) !== 0) {\r\n      if (this.computerValue === XO.O) {\r\n        return whichTurn.COMPUTER;\r\n      } else {\r\n        return whichTurn.COMPUTER;\r\n      }\r\n    }\r\n    if (this.getScore([...inputBox], XO.X) !== 0) {\r\n      if (this.computerValue === XO.X) {\r\n        return whichTurn.COMPUTER;\r\n      } else {\r\n        return whichTurn.COMPUTER;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n}\r\n","F:\\project\\node\\ai projects\\n-queen\\src\\App.tsx",["62"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport GameTable from \"./components/game-table/GameTable\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameTable />\n    </div>\n  );\n}\n\nexport default App;\n","F:\\project\\node\\ai projects\\n-queen\\src\\components\\game-table\\GameTable.tsx",["63","64","65","66","67","68","69","70","71"],"F:\\project\\node\\ai projects\\n-queen\\src\\reportWebVitals.ts",[],"F:\\project\\node\\ai projects\\n-queen\\src\\index.tsx",[],"F:\\project\\node\\ai projects\\n-queen\\src\\infrastructures\\n-queen\\NQeenTypes.ts",[],"F:\\project\\node\\ai projects\\n-queen\\src\\infrastructures\\n-queen\\NQueen.ts",["72","73","74"],{"ruleId":"75","severity":1,"message":"76","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":12},{"ruleId":"75","severity":1,"message":"79","line":8,"column":10,"nodeType":"77","messageId":"78","endLine":8,"endColumn":13},{"ruleId":"75","severity":1,"message":"80","line":22,"column":22,"nodeType":"77","messageId":"78","endLine":22,"endColumn":35},{"ruleId":"75","severity":1,"message":"81","line":29,"column":10,"nodeType":"77","messageId":"78","endLine":29,"endColumn":23},{"ruleId":"75","severity":1,"message":"82","line":29,"column":25,"nodeType":"77","messageId":"78","endLine":29,"endColumn":41},{"ruleId":"83","severity":1,"message":"84","line":97,"column":6,"nodeType":"85","endLine":97,"endColumn":8,"suggestions":"86"},{"ruleId":"75","severity":1,"message":"87","line":1,"column":25,"nodeType":"77","messageId":"78","endLine":1,"endColumn":40},{"ruleId":"75","severity":1,"message":"79","line":2,"column":18,"nodeType":"77","messageId":"78","endLine":2,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":17,"column":3,"nodeType":"90","messageId":"91","endLine":17,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":12},{"ruleId":"75","severity":1,"message":"92","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":18},{"ruleId":"75","severity":1,"message":"93","line":4,"column":10,"nodeType":"77","messageId":"78","endLine":4,"endColumn":17},{"ruleId":"75","severity":1,"message":"94","line":5,"column":10,"nodeType":"77","messageId":"78","endLine":5,"endColumn":18},{"ruleId":"75","severity":1,"message":"95","line":8,"column":10,"nodeType":"77","messageId":"78","endLine":8,"endColumn":18},{"ruleId":"75","severity":1,"message":"80","line":95,"column":22,"nodeType":"77","messageId":"78","endLine":95,"endColumn":35},{"ruleId":"75","severity":1,"message":"96","line":104,"column":10,"nodeType":"77","messageId":"78","endLine":104,"endColumn":19},{"ruleId":"75","severity":1,"message":"97","line":104,"column":21,"nodeType":"77","messageId":"78","endLine":104,"endColumn":33},{"ruleId":"83","severity":1,"message":"98","line":138,"column":6,"nodeType":"85","endLine":138,"endColumn":8,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":160,"column":17,"nodeType":"102","endLine":160,"endColumn":79},{"ruleId":"75","severity":1,"message":"103","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":17},{"ruleId":"75","severity":1,"message":"104","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":21},{"ruleId":"75","severity":1,"message":"92","line":4,"column":10,"nodeType":"77","messageId":"78","endLine":4,"endColumn":18},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'xor' is defined but never used.","'setButtonText' is assigned a value but never used.","'winnerMessage' is assigned a value but never used.","'setWinnerMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameManager'. Either include it or remove the dependency array.","ArrayExpression",["105"],"'INodeOfTreeType' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'IBoxType' is defined but never used.","'FaTimes' is defined but never used.","'FiCircle' is defined but never used.","'promises' is defined but never used.","'lockBoxes' is assigned a value but never used.","'setLockBoxes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'boxes'. Either include it or remove the dependency array.",["106"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'queries' is defined but never used.","'IconContext' is defined but never used.",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [gameManager]",{"range":"111","text":"112"},"Update the dependencies array to be: [boxes]",{"range":"113","text":"114"},[3232,3234],"[gameManager]",[3923,3925],"[boxes]"]
[{"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\reportWebVitals.ts":"1","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\App.tsx":"2","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\index.tsx":"3","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\components\\game-table\\GameTable.tsx":"4","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGameTypes.ts":"5","F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGame.ts":"6","F:\\project\\node\\ai projects\\n-queen\\src\\App.tsx":"7","F:\\project\\node\\ai projects\\n-queen\\src\\components\\game-table\\GameTable.tsx":"8","F:\\project\\node\\ai projects\\n-queen\\src\\reportWebVitals.ts":"9","F:\\project\\node\\ai projects\\n-queen\\src\\index.tsx":"10","F:\\project\\node\\ai projects\\maze\\src\\components\\game-table\\GameTable.tsx":"11","F:\\project\\node\\ai projects\\maze\\src\\infrastructures\\n-queen\\MazeTypes.ts":"12","F:\\project\\node\\ai projects\\maze\\src\\index.tsx":"13","F:\\project\\node\\ai projects\\maze\\src\\infrastructures\\n-queen\\Maze.ts":"14","F:\\project\\node\\ai projects\\maze\\src\\reportWebVitals.ts":"15"},{"size":425,"mtime":1611855620422,"results":"16","hashOfConfig":"17"},{"size":231,"mtime":1611862874911,"results":"18","hashOfConfig":"17"},{"size":500,"mtime":1611855620422,"results":"19","hashOfConfig":"17"},{"size":4324,"mtime":1612047562037,"results":"20","hashOfConfig":"17"},{"size":248,"mtime":1612015679152,"results":"21","hashOfConfig":"17"},{"size":10221,"mtime":1612045823347,"results":"22","hashOfConfig":"17"},{"size":231,"mtime":1611862874911,"results":"23","hashOfConfig":"24"},{"size":2066,"mtime":1612113917493,"results":"25","hashOfConfig":"24"},{"size":425,"mtime":1611855620422,"results":"26","hashOfConfig":"24"},{"size":500,"mtime":1611855620422,"results":"27","hashOfConfig":"24"},{"size":7577,"mtime":1612250923311,"results":"28","hashOfConfig":"29"},{"size":182,"mtime":1612172947996,"results":"30","hashOfConfig":"29"},{"size":500,"mtime":1611855620422,"results":"31","hashOfConfig":"29"},{"size":3759,"mtime":1612202988111,"results":"32","hashOfConfig":"29"},{"size":425,"mtime":1611855620422,"results":"33","hashOfConfig":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b5syf7",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1x9uvkd",{"filePath":"49","messages":"50","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"6bdiht",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\reportWebVitals.ts",[],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\App.tsx",["66"],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\index.tsx",[],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\components\\game-table\\GameTable.tsx",["67","68","69","70","71"],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGameTypes.ts",[],"F:\\project\\node\\ai projects\\tic-tac-toe\\src\\infrastructures\\TicTacToeGame.ts",["72","73","74"],"import { XO, whichTurn, INodeOfTreeType, IChoice } from \"./TicTacToeGameTypes\";\r\nimport lodash, { xor } from \"lodash\";\r\n\r\nexport default class TicTacToeGame {\r\n  turn = whichTurn.HUMAN as whichTurn;\r\n  private humanValue = XO.O as XO;\r\n  private computerValue = XO.X as XO;\r\n  choices = [] as IChoice[];\r\n  box = [\r\n    [XO.EMPTY, XO.EMPTY, XO.EMPTY],\r\n    [XO.EMPTY, XO.EMPTY, XO.EMPTY],\r\n    [XO.EMPTY, XO.EMPTY, XO.EMPTY],\r\n  ] as XO[][];\r\n  /**\r\n   *this class is for handle tic-tac-toe game\r\n   */\r\n  constructor() {}\r\n\r\n  //main methods\r\n  startGame = () => {\r\n    this.emptyBox();\r\n  };\r\n  stopGame = () => {\r\n    console.log(\"finish it right now\");\r\n  };\r\n  humanMove = (i: number, j: number): XO[][] => {\r\n    if (this.turn === whichTurn.HUMAN) {\r\n      this.choices = [];\r\n      this.box[i][j] = this.humanValue;\r\n      this.turn = whichTurn.COMPUTER;\r\n      // let newBox = this.alphaBetaAlgorithm(\r\n      //   lodash.cloneDeep(this.box),\r\n      //   -Infinity,\r\n      //   +Infinity,\r\n      //   whichTurn.COMPUTER,\r\n      //   true\r\n      // ) as XO[][];\r\n      // if (!newBox) {\r\n      //   this.stopGame();\r\n      // }\r\n    }\r\n    return this.box;\r\n  };\r\n  computerMove = (): XO[][] => {\r\n    if (this.turn === whichTurn.COMPUTER) {\r\n      this.choices = [];\r\n      this.alphaBetaAlgorithm(\r\n        lodash.cloneDeep(this.box),\r\n        -Infinity,\r\n        +Infinity,\r\n        whichTurn.COMPUTER,\r\n        true\r\n      ) as XO[][];\r\n\r\n      console.log([...this.choices]);\r\n      this.box = this.getFinalBox([...this.choices]);\r\n      this.turn = whichTurn.HUMAN;\r\n      return this.box;\r\n    }\r\n    return this.box;\r\n  };\r\n  //computer is defined as minimizer and human as maximiser\r\n  // alphaBetaAlgorithm = (\r\n  //   inputBox: XO[][],\r\n  //   alpha: number,\r\n  //   beta: number,\r\n  //   turn: whichTurn,\r\n  //   isFirstStep: boolean\r\n  // ): number | XO[][] | undefined => {\r\n  //   //console.log(inputBox);\r\n  //   if (this.isFull(inputBox)) {\r\n  //     return turn === whichTurn.HUMAN\r\n  //       ? this.getScore(inputBox, this.humanValue) -\r\n  //           this.getScore(inputBox, this.computerValue)\r\n  //       : this.getScore(inputBox, this.computerValue) -\r\n  //           this.getScore(inputBox, this.humanValue);\r\n  //   }\r\n\r\n  //   if (turn === whichTurn.COMPUTER) {\r\n  //     let nodeChildren = this.getChildren(inputBox, this.computerValue);\r\n  //     for (let arg of nodeChildren) {\r\n  //       let algorithmOutput = this.alphaBetaAlgorithm(\r\n  //         [...arg],\r\n  //         alpha,\r\n  //         beta,\r\n  //         whichTurn.HUMAN,\r\n  //         false\r\n  //       ) as number;\r\n  //       if (algorithmOutput <= beta) {\r\n  //         beta = algorithmOutput;\r\n  //         if (isFirstStep) {\r\n  //           if (beta === 0) {\r\n  //             return undefined;\r\n  //           }\r\n  //           this.choices.push({ value: algorithmOutput, box: arg });\r\n  //           continue;\r\n  //         }\r\n  //         if (alpha >= beta) {\r\n  //           return beta;\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     return beta;\r\n  //   } else {\r\n  //     let nodeChildren = this.getChildren(inputBox, this.humanValue);\r\n  //     for (let arg of nodeChildren) {\r\n  //       let algorithmOutput = this.alphaBetaAlgorithm(\r\n  //         [...arg],\r\n  //         alpha,\r\n  //         beta,\r\n  //         whichTurn.COMPUTER,\r\n  //         false\r\n  //       ) as number;\r\n  //       if (algorithmOutput >= alpha) {\r\n  //         alpha = algorithmOutput;\r\n  //         if (isFirstStep) {\r\n  //           if (alpha === 0) {\r\n  //             return undefined;\r\n  //           }\r\n  //           this.choices.push({ value: algorithmOutput, box: arg });\r\n  //           continue;\r\n  //         }\r\n  //         if (alpha >= beta) {\r\n  //           return alpha;\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     return alpha;\r\n  //   }\r\n  // };\r\n\r\n  alphaBetaAlgorithm = (\r\n    inputBox: XO[][],\r\n    alpha: number,\r\n    beta: number,\r\n    turn: whichTurn,\r\n    isFirstStep: boolean\r\n  ): number | XO[][] | undefined => {\r\n    //console.log(inputBox);\r\n    if (this.oneLeft(inputBox)) {\r\n      if (turn === whichTurn.COMPUTER) {\r\n        this.insertLeftOne(inputBox, this.computerValue);\r\n      } else {\r\n        this.insertLeftOne(inputBox, this.humanValue);\r\n      }\r\n    }\r\n\r\n    if (this.isFull(inputBox)) {\r\n      return (\r\n        this.getScore(inputBox, this.computerValue) * -1 +\r\n        this.getScore(inputBox, this.humanValue)\r\n      );\r\n    }\r\n\r\n    if (turn === whichTurn.COMPUTER) {\r\n      if (\r\n        this.getScore(inputBox, this.computerValue) !== 0 ||\r\n        this.getScore(inputBox, this.humanValue) !== 0\r\n      ) {\r\n        return (\r\n          this.getScore(inputBox, this.computerValue) * -1 +\r\n          this.getScore(inputBox, this.humanValue)\r\n        );\r\n      }\r\n      let nodeChildren = this.getChildren(inputBox, this.computerValue);\r\n      for (let arg of nodeChildren) {\r\n        let algorithmOutput = this.alphaBetaAlgorithm(\r\n          [...arg],\r\n          alpha,\r\n          beta,\r\n          whichTurn.HUMAN,\r\n          false\r\n        ) as number;\r\n        if (algorithmOutput < beta) {\r\n          beta = algorithmOutput;\r\n          if (isFirstStep) {\r\n            // if (beta === 0) {\r\n            //   return undefined;\r\n            // }\r\n            this.choices.push({ value: algorithmOutput, box: arg });\r\n          }\r\n          if (alpha > beta) {\r\n            return beta;\r\n          }\r\n        }\r\n      }\r\n      if (isFirstStep) {\r\n        //return nodeChildren[nodeChildren.length - 1];\r\n      }\r\n      return beta;\r\n    } else {\r\n      if (\r\n        this.getScore(inputBox, this.computerValue) !== 0 ||\r\n        this.getScore(inputBox, this.humanValue) !== 0\r\n      ) {\r\n        return (\r\n          this.getScore(inputBox, this.computerValue) * -1 +\r\n          this.getScore(inputBox, this.humanValue)\r\n        );\r\n      }\r\n      let nodeChildren = this.getChildren(inputBox, this.humanValue);\r\n      for (let arg of nodeChildren) {\r\n        let algorithmOutput = this.alphaBetaAlgorithm(\r\n          [...arg],\r\n          alpha,\r\n          beta,\r\n          whichTurn.COMPUTER,\r\n          false\r\n        ) as number;\r\n        if (algorithmOutput > alpha) {\r\n          alpha = algorithmOutput;\r\n          if (isFirstStep) {\r\n            // if (alpha === 0) {\r\n            //   return undefined;\r\n            // }\r\n            this.choices.push({ value: algorithmOutput, box: arg });\r\n          }\r\n          if (alpha > beta) {\r\n            return alpha;\r\n          }\r\n        }\r\n      }\r\n      // if (isFirstStep) {\r\n      //   return nodeChildren[nodeChildren.length - 1];\r\n      // }\r\n      return alpha;\r\n    }\r\n  };\r\n\r\n  ////secondary methods\r\n  //empty main box\r\n  private emptyBox = (): void => {\r\n    for (let i = 0; i < this.box.length; i++) {\r\n      for (let j = 0; j < this.box[i].length; j++) {\r\n        this.box[i][j] = XO.EMPTY;\r\n      }\r\n    }\r\n  };\r\n\r\n  //get score of an full box\r\n  private getScore = (inputBox: XO[][], xo: XO): number => {\r\n    let score = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n      if (\r\n        inputBox[i][0] === xo &&\r\n        inputBox[i][1] === xo &&\r\n        inputBox[i][2] === xo\r\n      ) {\r\n        score++;\r\n      }\r\n      if (\r\n        inputBox[0][i] === xo &&\r\n        inputBox[1][i] === xo &&\r\n        inputBox[2][i] === xo\r\n      ) {\r\n        score++;\r\n      }\r\n    }\r\n\r\n    if (\r\n      inputBox[0][0] === xo &&\r\n      inputBox[1][1] === xo &&\r\n      inputBox[2][2] === xo\r\n    ) {\r\n      score++;\r\n    }\r\n    if (\r\n      inputBox[0][2] === xo &&\r\n      inputBox[1][1] === xo &&\r\n      inputBox[2][0] === xo\r\n    ) {\r\n      score++;\r\n    }\r\n    return score;\r\n  };\r\n\r\n  //predict all available situations\r\n  private predictSituations = (inputBox: XO[][], value: XO): XO[][][] => {\r\n    let outPut = [] as XO[][][];\r\n    let emptyAddresses = [];\r\n    for (let i = 0; i < inputBox.length; i++) {\r\n      for (let j = 0; j < inputBox.length; j++) {\r\n        if (inputBox[i][j] === XO.EMPTY) {\r\n          emptyAddresses.push({ i, j });\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let arg of emptyAddresses) {\r\n      let newBox = lodash.cloneDeep(inputBox);\r\n      newBox[arg.i][arg.j] = value;\r\n      outPut.push(newBox);\r\n    }\r\n    return outPut;\r\n  };\r\n\r\n  //check that main box is full or not\r\n  private isFull = (inputBox: XO[][]): boolean => {\r\n    let temp = [...inputBox];\r\n    for (let i = 0; i < temp.length; i++) {\r\n      for (let j = 0; j < temp[i].length; j++) {\r\n        if (temp[i][j] === XO.EMPTY) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  private oneLeft = (inputBox: XO[][]): boolean => {\r\n    let sum = 0;\r\n    let temp = [...inputBox];\r\n    for (let i = 0; i < temp.length; i++) {\r\n      for (let j = 0; j < temp[i].length; j++) {\r\n        if (temp[i][j] === XO.EMPTY) {\r\n          sum++;\r\n        }\r\n      }\r\n    }\r\n    if (sum === 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  private insertLeftOne = (inputBox: XO[][], xo: XO) => {\r\n    for (let i = 0; i < inputBox.length; i++) {\r\n      for (let j = 0; j < inputBox[i].length; j++) {\r\n        if (inputBox[i][j] === XO.EMPTY) {\r\n          inputBox[i][j] = xo;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private getChildren = (inputBox: XO[][], value: XO): XO[][][] => {\r\n    return this.predictSituations(inputBox, value);\r\n  };\r\n  getFinalBox = (inputChoices: IChoice[]): XO[][] => {\r\n    // if (this.turn === whichTurn.COMPUTER) {\r\n    //   return inputChoices.sort((item) => item.value)[0].box;\r\n    // } else {\r\n    //   return inputChoices.sort((item) => item.value)[inputChoices.length - 1]\r\n    //     .box;\r\n    // }\r\n    return [...inputChoices].sort((a, b) => a.value - b.value)[0].box;\r\n  };\r\n  checkForWinner = (inputBox: XO[][]): whichTurn | null => {\r\n    if (this.getScore([...inputBox], XO.O) !== 0) {\r\n      if (this.computerValue === XO.O) {\r\n        return whichTurn.COMPUTER;\r\n      } else {\r\n        return whichTurn.COMPUTER;\r\n      }\r\n    }\r\n    if (this.getScore([...inputBox], XO.X) !== 0) {\r\n      if (this.computerValue === XO.X) {\r\n        return whichTurn.COMPUTER;\r\n      } else {\r\n        return whichTurn.COMPUTER;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n}\r\n","F:\\project\\node\\ai projects\\n-queen\\src\\App.tsx",["75"],"F:\\project\\node\\ai projects\\n-queen\\src\\components\\game-table\\GameTable.tsx",["76","77","78","79","80","81","82","83","84"],"F:\\project\\node\\ai projects\\n-queen\\src\\reportWebVitals.ts",[],"F:\\project\\node\\ai projects\\n-queen\\src\\index.tsx",[],"F:\\project\\node\\ai projects\\maze\\src\\components\\game-table\\GameTable.tsx",["85","86","87","88","89","90"],"F:\\project\\node\\ai projects\\maze\\src\\infrastructures\\n-queen\\MazeTypes.ts",[],"F:\\project\\node\\ai projects\\maze\\src\\index.tsx",[],"F:\\project\\node\\ai projects\\maze\\src\\infrastructures\\n-queen\\Maze.ts",["91"],"import { IBoxesForTrace, I_J, MapContent } from \"./MazeTypes\";\r\nimport lodash from \"lodash\";\r\nimport { isReturnStatement } from \"typescript\";\r\n\r\nexport default class Maze {\r\n  /**\r\n   *\r\n   */\r\n  private mainMap: MapContent[][];\r\n  private startPoint: I_J;\r\n  private endPoint: I_J;\r\n  private finalPath = [] as I_J[];\r\n  private minF = Infinity;\r\n  constructor(mainMap: MapContent[][], startPoint: I_J, endPoint: I_J) {\r\n    this.fenceAroundMap(mainMap);\r\n    this.mainMap = mainMap;\r\n    this.startPoint = startPoint;\r\n    this.endPoint = endPoint;\r\n  }\r\n  start = () => {\r\n    if (\r\n      this.heuristicAlgorithm(\r\n        this.startPoint.i,\r\n        this.startPoint.j,\r\n        0,\r\n        this.mainMap,\r\n        []\r\n      )\r\n    ) {\r\n      return this.finalPath;\r\n    }\r\n    return [];\r\n  };\r\n  getNextSteps = (inputMap: MapContent[][], point: I_J): I_J[] => {\r\n    let points = [] as I_J[];\r\n\r\n    //check top\r\n    if (inputMap[point.i - 1][point.j] === MapContent.EMPTY) {\r\n      points.push({ i: point.i - 2, j: point.j });\r\n    }\r\n    //check right\r\n    if (inputMap[point.i][point.j + 1] === MapContent.EMPTY) {\r\n      points.push({ i: point.i, j: point.j + 2 });\r\n    }\r\n    //check bottom\r\n    if (inputMap[point.i + 1][point.j] === MapContent.EMPTY) {\r\n      points.push({ i: point.i + 2, j: point.j });\r\n    }\r\n    //check left\r\n    if (inputMap[point.i][point.j - 1] === MapContent.EMPTY) {\r\n      points.push({ i: point.i, j: point.j - 2 });\r\n    }\r\n    return points;\r\n  };\r\n  blockBox = (inputMap: MapContent[][], point: I_J): MapContent[][] => {\r\n    inputMap = lodash.cloneDeep(inputMap);\r\n    inputMap[point.i - 1][point.j] = MapContent.Barrier;\r\n    inputMap[point.i][point.j + 1] = MapContent.Barrier;\r\n    inputMap[point.i + 1][point.j] = MapContent.Barrier;\r\n    inputMap[point.i][point.j - 1] = MapContent.Barrier;\r\n    return inputMap;\r\n  };\r\n  heuristicAlgorithm = (\r\n    i: number,\r\n    j: number,\r\n    Gn: number,\r\n    inputMap: MapContent[][],\r\n    pathTaken: I_J[]\r\n  ): boolean => {\r\n    if (this.endPoint.i === i && this.endPoint.j === j) {\r\n      pathTaken.push({ ...this.endPoint });\r\n      this.finalPath = lodash.cloneDeep(pathTaken);\r\n      return true;\r\n    } else {\r\n      inputMap = lodash.cloneDeep(inputMap);\r\n      let nextBoxes = this.getNextSteps(inputMap, { i, j });\r\n      if (nextBoxes.length === 0) {\r\n        return false;\r\n      }\r\n\r\n      let boxesForTrace = nextBoxes.map((item) => ({\r\n        Fn:\r\n          Math.abs(\r\n            (this.endPoint.i - item.i) / 2 +\r\n              Math.abs(this.endPoint.j - item.j) / 2\r\n          ) + Gn,\r\n        point: item,\r\n      })) as IBoxesForTrace[];\r\n\r\n      boxesForTrace = boxesForTrace.sort((a, b) => a.Fn - b.Fn);\r\n      // if (boxesForTrace.every((x) => x.Fn > minFn)) {\r\n      //   return false;\r\n      // } else {\r\n      //   minFn = boxesForTrace[1] ? boxesForTrace[1].Fn : minFn;\r\n      // }\r\n      let mapWithBlockBoxes = this.blockBox(inputMap, { i, j });\r\n      pathTaken.push({ i, j });\r\n      for (let box of boxesForTrace) {\r\n        let algorithmOutput = this.heuristicAlgorithm(\r\n          box.point.i,\r\n          box.point.j,\r\n          Gn + 1,\r\n          mapWithBlockBoxes,\r\n          lodash.cloneDeep(pathTaken)\r\n        );\r\n        if (algorithmOutput) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n  fenceAroundMap = (inputMap: MapContent[][]) => {\r\n    for (let i = 0; i < inputMap.length; i++) {\r\n      for (let j = 0; j < inputMap[i].length; j++) {\r\n        if (i === 0 || i === inputMap.length - 1) {\r\n          inputMap[i][j] = MapContent.Barrier;\r\n        }\r\n        if (j === 0 || j === inputMap[i].length - 1) {\r\n          inputMap[i][j] = MapContent.Barrier;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n","F:\\project\\node\\ai projects\\maze\\src\\reportWebVitals.ts",[],{"ruleId":"92","severity":1,"message":"93","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":12},{"ruleId":"92","severity":1,"message":"96","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":13},{"ruleId":"92","severity":1,"message":"97","line":22,"column":22,"nodeType":"94","messageId":"95","endLine":22,"endColumn":35},{"ruleId":"92","severity":1,"message":"98","line":29,"column":10,"nodeType":"94","messageId":"95","endLine":29,"endColumn":23},{"ruleId":"92","severity":1,"message":"99","line":29,"column":25,"nodeType":"94","messageId":"95","endLine":29,"endColumn":41},{"ruleId":"100","severity":1,"message":"101","line":97,"column":6,"nodeType":"102","endLine":97,"endColumn":8,"suggestions":"103"},{"ruleId":"92","severity":1,"message":"104","line":1,"column":25,"nodeType":"94","messageId":"95","endLine":1,"endColumn":40},{"ruleId":"92","severity":1,"message":"96","line":2,"column":18,"nodeType":"94","messageId":"95","endLine":2,"endColumn":21},{"ruleId":"105","severity":1,"message":"106","line":17,"column":3,"nodeType":"107","messageId":"108","endLine":17,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":12},{"ruleId":"92","severity":1,"message":"109","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":26},{"ruleId":"92","severity":1,"message":"110","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":17},{"ruleId":"92","severity":1,"message":"111","line":5,"column":10,"nodeType":"94","messageId":"95","endLine":5,"endColumn":18},{"ruleId":"92","severity":1,"message":"112","line":9,"column":17,"nodeType":"94","messageId":"95","endLine":9,"endColumn":25},{"ruleId":"92","severity":1,"message":"97","line":27,"column":22,"nodeType":"94","messageId":"95","endLine":27,"endColumn":35},{"ruleId":"92","severity":1,"message":"113","line":28,"column":10,"nodeType":"94","messageId":"95","endLine":28,"endColumn":19},{"ruleId":"92","severity":1,"message":"114","line":28,"column":21,"nodeType":"94","messageId":"95","endLine":28,"endColumn":33},{"ruleId":"92","severity":1,"message":"115","line":32,"column":26,"nodeType":"94","messageId":"95","endLine":32,"endColumn":43},{"ruleId":"116","severity":1,"message":"117","line":48,"column":15,"nodeType":"118","endLine":48,"endColumn":77},{"ruleId":"92","severity":1,"message":"110","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":17},{"ruleId":"92","severity":1,"message":"111","line":5,"column":10,"nodeType":"94","messageId":"95","endLine":5,"endColumn":18},{"ruleId":"92","severity":1,"message":"97","line":11,"column":22,"nodeType":"94","messageId":"95","endLine":11,"endColumn":35},{"ruleId":"92","severity":1,"message":"113","line":13,"column":10,"nodeType":"94","messageId":"95","endLine":13,"endColumn":19},{"ruleId":"92","severity":1,"message":"114","line":13,"column":21,"nodeType":"94","messageId":"95","endLine":13,"endColumn":33},{"ruleId":"92","severity":1,"message":"115","line":17,"column":26,"nodeType":"94","messageId":"95","endLine":17,"endColumn":43},{"ruleId":"92","severity":1,"message":"119","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":27},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'xor' is defined but never used.","'setButtonText' is assigned a value but never used.","'winnerMessage' is assigned a value but never used.","'setWinnerMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameManager'. Either include it or remove the dependency array.","ArrayExpression",["120"],"'INodeOfTreeType' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'useEffect' is defined but never used.","'FaTimes' is defined but never used.","'FiCircle' is defined but never used.","'setBoxes' is assigned a value but never used.","'lockBoxes' is assigned a value but never used.","'setLockBoxes' is assigned a value but never used.","'setBoxDancerColor' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isReturnStatement' is defined but never used.",{"desc":"121","fix":"122"},"Update the dependencies array to be: [gameManager]",{"range":"123","text":"124"},[3232,3234],"[gameManager]"]